library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.ALL;
use work.perceptron.all;

entity multiplication_fp_general is
	port( A, B : in std_logic_vector(31 downto 0); --32 bit input floating point
			multi : OUT std_logic_vector(31 downto 0)); --32 bit output floating point
end multiplication_fp_general;

architecture behavioral of multiplication_fp_general is

begin
	process(A,B)
		
		variable A_mantissa : std_logic_vector(23 downto 0); --extra bit during multiplication?
		variable A_exp : std_logic_vector(8 downto 0); --extra bit for overflow during addition
		variable A_sign : std_logic;
		
		variable B_mantissa : std_logic_vector(23 downto 0);
		variable B_exp : std_logic_vector(8 downto 0);
		variable B_sign : std_logic;
		
		variable multi_mantissa : std_logic_vector(22 downto 0);
		variable multi_exp : std_logic_vector(7 downto 0);
		variable multi_sign : std_logic;
		
		variable temp : std_logic_vector(45 downto 0);
	
	begin
		
		--representation of number is in the form of denormalized floating points
		A_mantissa(22 downto 0) := A(22 downto 0);
		A_mantissa(23) := '0'; 
		A_exp(7 downto 0) := A(30 downto 23);
		A_exp(8) := '0';
		A_sign := A(31);
		
		B_mantissa(22 downto 0) := B(22 downto 0);
		B_mantissa(23) := '0'; 
		B_exp(7 downto 0) := B(30 downto 23);
		B_exp(8) := '0';
		B_sign := B(31);
		
		if (unsigned(A_exp) = 255 or unsigned(B_exp) = 255) then
			--if either exp is 255, then there is definite overflow. hence output goes to infinity
			multi_exp := "111111111"; --condition for NaN
			multi_mantissa := (others => '0');
			multi_sign := (A_sign xor B_sign);
		end if;
		
		--as the input is in the format of 0.**23bits, there should not be underflow which would cause any problems
		
		multi_sign := (A_sign xor B_sign);
		multi_exp := std_logic_vector(unsigned(A_exp) + unsigned(B_exp));
		temp := std_logic_vector(unsigned(A_mantissa) * unsigned(B_mantissa)); --what happend in the case of output has less than 46 bits?
		
		--there should't be any overflow in mantissa as the max no.of bits after multiplication is 46bits
		
		--normalization by keeping msb of mantissa as non zero - done by rigth shift and subtracting 1 from exp
		while temp(45) = '0' and unsigned(multi_exp) > 0 loop
			temp(45 downto 0) := temp(44 downto 0) & '0';
			multi_exp := multi_exp - '1'; 
		end loop;
		
		--checking overflow/underflow in exp of multi
		if unsigned(multi_exp) > 255 or unsigned(multi_exp) >0 then
			multi_exp := '111111111';
			multi_mantissa := (others => '0');
			multi_sign := (A_sign xor B_sign);
			
		--rounding off condition - currently just truncating the right most digits
		--check and asign the number back to the output variable.
		multi(31) <= multi_sign;
		multi(30 downto 23) <= multi_exp(7 downto 0);
		multi(22 downto 0) <= temp(45 downto 22);				
			
	
end architecture;
