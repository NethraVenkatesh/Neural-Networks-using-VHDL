library IEEE;
use IEEE.std_logic_1164.all;
use ieee.numeric_std.ALL;
use work.perceptron.all;

entity Genric_Matrix_Add is
	generic(
		i_rows : integer;
		i_columns : integer);
	port( A, B : in array(0 to i_rows) of std_logic_vector(i_columns downto 0); 
			c : OUT array(0 to i_rows) of std_logic_vector(i_columns downto 0));
end Genric_Matrix_Add;

architecture behavioral of Genric_Matrix_Add is

--	--intermediate matrix format
--	type matrixType is array(0 to 1, 0 to 1) of unsigned(2 downto 0);
--	signal matA, matB : matrixType := (others => (others => "000"));
--	type outType is array(0 to 1, 0 to 1) of unsigned(3 downto 0);
--	signal matC : outType := (others => (others => "0000"));
--	signal i, j: integer :=0;

	
	begin
	process (A, B)
--	variable add_temp : unsigned(3 downto 0);
--	variable checker : unsigned(3 downto 0);
	begin

--		for i in 0 to i_rows loop
--			for j in 0 to i_columns loop
--				matA(i,j) <= A(((i*2+j+1)*3)-1 downto (i*2+j)*3);
--				matB(i,j) <= B(((i*2+j+1)*3)-1 downto (i*2+j)*3);
--			end loop;
--		end loop;
		
		--addition of 2D matrix
		for i in 0 to i_rows loop
			for j in 0 to i_columns loop
				C(i,j) := matA(i,j)+  matB(i,j);
--				C(i,j) <= add_temp;
			end loop;
		end loop;
		
		--return in 1D matrix
--		for i in 0 to i_rows loop
--			for j in 0 to i_columns loop
--				checker := matC(i,j);
--				C(((i*2+j+1)*4)-1 downto (i*2+j)*4) <= checker;
--			end loop;
--		end loop;
--	end process;
--	
end architecture;
